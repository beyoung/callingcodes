---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { callingCodes } from '../data/calling-codes';

const title = "Countries List - Global Calling Codes Map";
const description = "Browse phone code information for all countries, with support for filtering by region, search, and sorting functions.";

// 按地区分组国家
const regions = [...new Set(callingCodes.map(country => country.region))].sort();
const countriesByRegion = regions.reduce((acc, region) => {
  acc[region] = callingCodes.filter(country => country.region === region);
  return acc;
}, {} as Record<string, typeof callingCodes>);

const structuredData = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  "name": "Countries List",
  "description": description,
  "mainEntity": {
    "@type": "ItemList",
    "name": "Countries with Phone Codes",
    "description": "Complete list of countries with their international calling codes",
    "numberOfItems": callingCodes.length
  }
};
---

<BaseLayout 
  title={title} 
  description={description}
  keywords="countries list, phone codes, calling codes, international dialing codes, country codes, telephone codes"
  structuredData={structuredData}
>
  <Header />
  
  <main class="container mx-auto px-4 py-8 max-w-6xl">
    <!-- Page Header -->
    <header class="text-center mb-8">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">Countries List</h1>
      <p class="text-xl text-gray-600 max-w-2xl mx-auto">
        Browse all countries with their phone codes, regions, and timezone information. Use search and filters to find specific countries quickly.
      </p>
    </header>

    <!-- Search and Filter Controls -->
    <div class="bg-white rounded-lg shadow-sm p-6 mb-8">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <!-- Search Input -->
        <div class="md:col-span-2">
          <label for="search" class="block text-sm font-medium text-gray-700 mb-2">
            Search Countries
          </label>
          <input
            type="text"
            id="search"
            placeholder="Search countries..."
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        
        <!-- Search Button -->
        <div class="flex items-end">
          <button 
            id="search-btn"
            class="w-full px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
          >
            Search
          </button>
        </div>
      </div>
      
      <!-- Sort Options -->
      <div class="mt-4 flex flex-wrap gap-2">
        <span class="text-sm font-medium text-gray-700">Sort by:</span>
        <button class="sort-btn active" data-sort="name">Name</button>
        <button class="sort-btn" data-sort="callingCode">Code</button>
        <button class="sort-btn" data-sort="region">Region</button>
      </div>
    </div>

    <!-- Countries Grid -->
    <div id="countries-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {callingCodes.map(country => (
        <div class="country-card bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow p-6" 
             data-name={country.name.toLowerCase()}
             data-name-zh={country.nameZh.toLowerCase()}
             data-calling-code={country.callingCode}
             data-region={country.region}>
          <div class="flex items-center space-x-4 mb-4">
            <img 
              src={`https://flagcdn.com/w80/${country.iso2.toLowerCase()}.png`}
              alt={`${country.name} flag`}
              class="w-12 h-8 object-cover rounded border shadow-sm"
              loading="lazy"
            />
            <div class="flex-1">
              <h3 class="text-lg font-semibold text-gray-900">{country.name}</h3>
              {/* <p class="text-sm text-gray-600">{country.name}</p> */}
            </div>
          </div>
          
          <div class="space-y-2 mb-4">
            <div class="flex justify-between items-center">
              <span class="text-sm text-gray-600">Phone Code:</span>
              <span class="font-semibold text-blue-600">{country.callingCode}</span>
            </div>
            <div class="flex justify-between items-center">
              <span class="text-sm text-gray-600">Country Code:</span>
              <span class="font-medium text-gray-900">{country.iso2} / {country.iso3}</span>
            </div>
            <div class="flex justify-between items-center">
              <span class="text-sm text-gray-600">Region:</span>
              <span class="font-medium text-gray-700">{country.region}</span>
            </div>
          </div>
          
          <div class="flex space-x-2">
            <a 
              href={`/country/${country.iso2.toLowerCase()}`}
              class="flex-1 px-4 py-2 bg-blue-600 text-white text-center text-sm rounded-lg hover:bg-blue-700 transition-colors"
            >
              View Details
            </a>
            <button 
              class="px-4 py-2 bg-gray-100 text-gray-700 text-sm rounded-lg hover:bg-gray-200 transition-colors"
              onclick={`navigator.clipboard.writeText('${country.callingCode}')`}
              title="Copy Code"
            >
              Copy Code
            </button>
          </div>
        </div>
      ))}
    </div>

    <!-- No Results Message -->
    <div id="no-results" class="hidden text-center py-12">
      <div class="text-gray-400 mb-4">
        <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.47-.881-6.08-2.33"></path>
        </svg>
      </div>
      <h3 class="text-xl font-semibold text-gray-700 mb-2">No matching countries found</h3>
      <p class="text-gray-500">Please try adjusting your search terms or filter options</p>
    </div>

    <!-- Statistics -->
    <div class="mt-12 bg-white rounded-lg shadow-sm p-6">
      <h2 class="text-2xl font-semibold text-gray-900 mb-6">Statistics</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div class="text-center">
          <div class="text-3xl font-bold text-blue-600 mb-2">{callingCodes.length}</div>
          <div class="text-sm text-gray-600">Countries & Territories</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-green-600 mb-2">{regions.length}</div>
          <div class="text-sm text-gray-600">Geographic Regions</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-purple-600 mb-2">
            {[...new Set(callingCodes.map(c => c.callingCode))].length}
          </div>
          <div class="text-sm text-gray-600">Unique Codes</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-orange-600 mb-2">24/7</div>
          <div class="text-sm text-gray-600">Service Hours</div>
        </div>
      </div>
    </div>

    <!-- Region Overview -->
    <div class="mt-12 bg-white rounded-lg shadow-sm p-6">
      <h2 class="text-2xl font-semibold text-gray-900 mb-6">Regional Distribution</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {regions.map(region => (
          <div class="border border-gray-200 rounded-lg p-4">
            <h3 class="font-semibold text-gray-900 mb-2">{region}</h3>
            <p class="text-2xl font-bold text-blue-600 mb-2">
              {countriesByRegion[region].length}
            </p>
            <p class="text-sm text-gray-600">countries and territories</p>
            <div class="mt-3 flex flex-wrap gap-1">
              {countriesByRegion[region].slice(0, 6).map(country => (
                <img 
                  src={`https://flagcdn.com/w20/${country.iso2.toLowerCase()}.png`}
                  alt={country.name}
                  class="w-5 h-3 object-cover rounded border"
                  title={country.nameZh}
                  loading="lazy"
                />
              ))}
              {countriesByRegion[region].length > 6 && (
                <span class="text-xs text-gray-500 self-center ml-1">
                  +{countriesByRegion[region].length - 6}
                </span>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  </main>

  <Footer />

  <style>
    .sort-btn {
      @apply px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200 transition-colors cursor-pointer;
    }
    .sort-btn.active {
      @apply bg-blue-600 text-white hover:bg-blue-700;
    }
  </style>

  <script>
    // Search and filter functionality
    const searchInput = document.getElementById('search') as HTMLInputElement;
    const searchBtn = document.getElementById('search-btn') as HTMLButtonElement;
    const countryCards = document.querySelectorAll('.country-card') as NodeListOf<HTMLElement>;
    const noResults = document.getElementById('no-results') as HTMLElement;
    const sortButtons = document.querySelectorAll('.sort-btn') as NodeListOf<HTMLButtonElement>;

    let currentSort = 'name';

    function filterAndSort() {
      const searchTerm = searchInput.value.toLowerCase();
      
      let visibleCards = 0;
      
      countryCards.forEach(card => {
        const name = card.dataset.name || '';
        const nameZh = card.dataset.nameZh || '';
        const callingCode = card.dataset.callingCode || '';
        
        const matchesSearch = !searchTerm || 
          name.includes(searchTerm) || 
          nameZh.includes(searchTerm) || 
          callingCode.includes(searchTerm);
        
        if (matchesSearch) {
          card.style.display = 'block';
          visibleCards++;
        } else {
          card.style.display = 'none';
        }
      });
      
      noResults.style.display = visibleCards === 0 ? 'block' : 'none';
      
      // Sort visible cards
      sortCards();
    }

    function sortCards() {
      const container = document.getElementById('countries-container') as HTMLElement;
      const cards = Array.from(countryCards).filter(card => card.style.display !== 'none');
      
      cards.sort((a, b) => {
        let aValue = '';
        let bValue = '';
        
        switch (currentSort) {
          case 'name':
            aValue = a.dataset.name || '';
            bValue = b.dataset.name || '';
            break;
          case 'nameZh':
            aValue = a.dataset.nameZh || '';
            bValue = b.dataset.nameZh || '';
            break;
          case 'callingCode':
            aValue = a.dataset.callingCode || '';
            bValue = b.dataset.callingCode || '';
            return parseInt(aValue) - parseInt(bValue);
          case 'region':
            aValue = a.dataset.region || '';
            bValue = b.dataset.region || '';
            break;
        }
        
        return aValue.localeCompare(bValue);
      });
      
      // Re-append sorted cards
      cards.forEach(card => container.appendChild(card));
    }

    // Check if elements exist before adding event listeners
    if (searchInput && searchBtn && noResults) {
      // Event listeners
      searchInput.addEventListener('input', filterAndSort);
      searchBtn.addEventListener('click', filterAndSort);

      sortButtons.forEach(button => {
        button.addEventListener('click', () => {
          sortButtons.forEach(btn => btn.classList.remove('active'));
          button.classList.add('active');
          currentSort = button.dataset.sort || 'name';
          sortCards();
        });
      });

      // Copy to clipboard feedback
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target.textContent === 'Copy Code') {
          const originalText = target.textContent;
          target.textContent = 'Copied!';
          target.classList.add('bg-green-100', 'text-green-700');
          setTimeout(() => {
            target.textContent = originalText;
            target.classList.remove('bg-green-100', 'text-green-700');
          }, 2000);
        }
      });

      // Initial sort
      sortCards();
    } else {
      console.error('Required elements not found');
    }
  </script>
  <Footer />
</BaseLayout>